{"remainingRequest":"C:\\project\\scoped-store\\vue-scoped-store\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\project\\scoped-store\\vue-scoped-store\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\project\\scoped-store\\vue-scoped-store\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\project\\scoped-store\\vue-scoped-store\\src\\lib-components\\page3.vue?vue&type=template&id=6ae2e928&","dependencies":[{"path":"C:\\project\\scoped-store\\vue-scoped-store\\src\\lib-components\\page3.vue","mtime":1629091196182},{"path":"C:\\project\\scoped-store\\vue-scoped-store\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\project\\scoped-store\\vue-scoped-store\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\project\\scoped-store\\vue-scoped-store\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\project\\scoped-store\\vue-scoped-store\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}